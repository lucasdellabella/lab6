particle filter, create mapping
if cubeA: RRT to cube A, RRT to drone, place down
if cubeB: RRT to cube B, RRT to drone, place down
if cubeC: RRT to cube C, RRT to drone, place down
if cubeD: RRT to cube C, RRT to drone, place down
go to cubes in order

Step 1:
  Get recognition code from Lab2 working
  DONE: save model

Step 2:
  DONE: 2a. run particle filter, see if it works at all
  2b. Create map of {marker: marker_name}

    i. get unique IDs of each marker from grid.markers
    ii. TODO: checkup. localize robot with particle filtering
    iii. continue driving in circle, detect markers and decide which of the markers the detected marker is
          -- Maybe take the global position of each of the markers, and find the nearest neighbor to the observed_marker
    iv. create mapping of marker_name: absolute_grid_location to use as 'goal'
    v. if len(marker_locations) == 6: move to planning section
       else: goto step iii.

    PROBLEMS:
      1. detectImage() predicting things to be none. If we see a marker, the output definitely shouldn't be none
        a. Stop movement when doing detectImage()
      2. General angle is incorrect after particle filtering
      3. Probably need to move around more to discover all images

    POTENTIAL BUGS:
      1. Only runs marker correspondence section if (confidence == True).
         -> do we want to stop particle filtering after we have found robot position,
            and then use the found position


Step 3:
  Use RRT to plan path to Cube, and plan path to goal_pos as defined by the pdf

  Add center obstacle
  look, if cube seen:
    set goal in front of cube
  RRT to cube
  .pickup() cube
  set goal to target_marker
  RRT to target_marker
  .putdown() cube
